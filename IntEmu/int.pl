#!perl
use 5.010;
use strict;
use warnings;
use lib './lib';

use IntEmu;

use Data::Dumper;

#my $input = <>;


my $tests = [

#  999,999  999  12301 99999 99999 99999 99999 99999 99999 99999 99999 99999 99999 99999 99999 99999 99999 99999
#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
# ADD 1            ADD                     OUT         END
[ [       ],  0,[ 1101,    0,    0,   13,    4,   13,   99,    7,    8,    9,   10,   11,   12,   13],'ADD lit 1'],
[ [       ],  3,[ 1101,    1,    2,   13,    4,   13,   99,    7,    8,    9,   10,   11,   12,   13],'ADD lit 2'],
[ [       ], -1,[ 1101,    1,   -2,   13,    4,   13,   99,    7,    8,    9,   10,   11,   12,   13],'ADD lit 3'],

[ [       ],  0,[    1,   11,   12,   13,    4,   13,   99,    7,    8,    9,   10,    0,    0,   13],'ADD adr 1'],
[ [       ],  3,[    1,   11,   12,   13,    4,   13,   99,    7,    8,    9,   10,    1,    2,   13],'ADD adr 2'],
[ [       ], -1,[    1,   11,   12,   13,    4,   13,   99,    7,    8,    9,   10,    1,   -2,   13],'ADD adr 3'],

#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
#                 BASE         ADD                     OUT         END           b    p1    p2    p3
[ [       ],  0,[  109,   10,22201,    1,    2,    3,  204,    3,   99,    9,   10,    0,    0,   13],'ADD base 1'],
[ [       ],  3,[  109,   10,22201,    1,    2,    3,  204,    3,   99,    9,   10,    1,    2,   13],'ADD base 2'],
[ [       ], -1,[  109,   10,22201,    1,    2,    3,  204,    3,   99,    9,   10,    1,   -2,   13],'ADD base 3'],

# MULT 2          MULT                     OUT         END
[ [       ],  0,[ 1102,    0,    0,   13,    4,   13,   99,    7,    8,    9,   10,   11,   12,   13],'MULT lit 1'],
[ [       ],  2,[ 1102,    1,    2,   13,    4,   13,   99,    7,    8,    9,   10,   11,   12,   13],'MULT lit 2'],
[ [       ], -2,[ 1102,    1,   -2,   13,    4,   13,   99,    7,    8,    9,   10,   11,   12,   13],'MULT lit 3'],

#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
[ [       ],  0,[    2,   11,   12,   13,    4,   13,   99,    7,    8,    9,   10,    0,    0,   13],'MULT adr 1'],
[ [       ],  2,[    2,   11,   12,   13,    4,   13,   99,    7,    8,    9,   10,    1,    2,   13],'MULT adr 2'],
[ [       ], -2,[    2,   11,   12,   13,    4,   13,   99,    7,    8,    9,   10,    1,   -2,   13],'MULT adr 3'],

#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
#                 BASE        MULT                     OUT         END           b    p1    p2    p3
[ [       ],  0,[  109,   10,22202,   1,    2,    3,   204,    3,   99,    9,   10,    0,    0,   13],'MULT base 1'],
[ [       ],  2,[  109,   10,22202,   1,    2,    3,   204,    3,   99,    9,   10,    1,    2,   13],'MULT base 2'],
[ [       ], -2,[  109,   10,22202,   1,    2,    3,   204,    3,   99,    9,   10,    1,   -2,   13],'MULT base 3'],

#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
# IN 3              IN         OUT         END
[ [1      ],  1,[    3,   13,    4,   13,   99,    5,    6,    7,    8,    9,   10,   11,   12,  13],'IN adr 1'],
#                 BASE          IN         OUT         END                       b    p1    p2    p3
[ [1      ],  1,[  109,   10,  203,    3,  204,    3,   99,    7,    8,    9,   10,   11,   12,  13],'IN base 3'],


#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
# OUT 4            OUT         END                                               b    p1    p2    p3
[ [       ],  1,[  104,    1,   99,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,  13],'OUT lit 1'],
[ [       ],  1,[    4,    3,   99,    1,   -2,    9,    0,    0,    0,    0,    0,    0,    0,   0],'OUT adr 2'],
#                 BASE          IN         OUT         END                       b    p1    p2    p3
[ [1      ],  1,[  109,,   10, 203,    3,  204,    3,   99,    7,    8,    9,   10,   11,   12,  13],'OUT base 3'],

#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
# JT 5              JT               OUT         END   OUT         END           b    p1    p2    p3
[ [       ],  1,[ 1105,    1,    6,  104,    0,   99,  104,    1,   99,    9,   10,   11,   12,  13],'JT lit 1'],
[ [       ],  0,[ 1105,    0,    6,  104,    0,   99,  104,    1,   99,    9,   10,   11,   12,  13],'JT lit 2'],

[ [       ],  1,[    5,   11,   13,  104,    0,   99,  104,    1,   99,    9,   10,    1,   12,   6,],'JT adr 1'],
[ [       ],  0,[    5,   11,   13,  104,    0,   99,  104,    1,   99,    9,   10,    0,   12,   6,],'JT adr 2'],

#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
# JT 5            BASE          JT               OUT         END   OUT         END    p1    p2    p3
[ [       ],  1,[  109,   10, 2205,    1,    3,  104,    0,   99,  104,    1,   99,    1,   12,    8,],'JT base 1'],
[ [       ],  0,[  109,   10, 2205,    1,    3,  104,    0,   99,  104,    1,   99,    0,   12,    8,],'JT base 2'],



#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
# JF 6              JF               OUT         END   OUT         END           b    p1    p2    p3
[ [       ],  1,[ 1106,    0,    6,  104,    0,   99,  104,    1,   99,    9,   10,   11,   12,   13],'JF lit 1'],
[ [       ],  0,[ 1106,    1,    6,  104,    0,   99,  104,    1,   99,    9,   10,   11,   12,   13],'JF lit 2'],

[ [       ],  1,[    6,   11,   13,  104,    0,   99,  104,    1,   99,    9,   10,    0,   12,    6],'JF adr 1'],
[ [       ],  0,[    6,   11,   13,  104,    0,   99,  104,    1,   99,    9,   10,    1,   12,    6],'JF adr 2'],

# JF 5            BASE          JF               OUT         END   OUT         END    p1    p2    p3
[ [       ],  1,[  109,   10, 2206,    1,    3,  104,    0,   99,  104,    1,   99,    0,   12,    8,],'JT base 1'],
[ [       ],  0,[  109,   10, 2206,    1,    3,  104,    0,   99,  104,    1,   99,    1,   12,    8,],'JT base 2'],




#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
# STL 7            STL                     OUT         END
[ [       ],  1,[ 1107,    0,    6,    7,    4,    7,   99,    0,   -2,    9,    0,   -2,    9],'STL lit 1'],
[ [       ],  0,[ 1107,    6,    0,    7,    4,    7,   99,    1,   -2,    9,    1,   -2,    9],'STL lit 2'],

[ [       ],  1,[    7,    7,    8,    9,    4,    9,   99,    0,    6,    9,    0,    6,    9],'STL adr 1'],
[ [       ],  0,[    7,    7,    8,    9,    4,    9,   99,    6,    0,    9,    6,    0,    9],'STL adr 2'],

# STE 8            STE                     OUT         END
#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
[ [       ],  1,[ 1108,    6,    6,    7,    4,    7,   99,    0,   -2,    9,    0,   -2,    9],'STE lit 1'],
[ [       ],  0,[ 1108,    6,    7,    7,    4,    7,   99,    1,   -2,    9,    1,   -2,    9],'STE lit 2'],

[ [       ],  1,[    8,    7,    8,    9,    4,    9,   99,    6,    6,    9,    6,    6,    9],'STE adr 1'],
[ [       ],  0,[    8,    7,    8,    9,    4,    9,   99,    6,    7,    9,    6,    7,    9],'STE adr 2'],

#  p1   p2  res      0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
# BASE 9          BASE         OUT         END   OUT                             b    p1    p2    p3
[ [       ], 11,[  109,    0,  204,   11,   99,    5,    6,    7,    8,    9,   10,   11,   12,   13],'BASE lit 1'],
[ [       ], 11,[  109,   10,  204,    1,   99,    5,    6,    7,    8,    9,   10,   11,   12,   13],'BASE lit 2'],

[ [       ], 11,[    9,   10,  204,    1,   99,    5,    6,    7,    8,    9,   10,   11,   12,   13],'BASE adr 1'],
[ [       ], 11,[    9,    1,  204,   10,   99,    5,    6,    7,    8,    9,   10,   11,   12,   13],'BASE adr 2'],

[ [       ], 11,[  209,   10,  204,    1,   99,    5,    6,    7,    8,    9,   10,   11,   12,   13],'BASE base 1'],
[ [       ], 11,[  209,    1,  204,   10,   99,    5,    6,    7,    8,    9,   10,   11,   12,   13],'BASE base 2'],

];


if (1) {
  my $test_count = 0;
  my $test_skip  = 0;
  my $test_limit = 999;

  for my $test (@$tests) {
    $test_count++;
    next if ($test_count <= $test_skip);
    last if ($test_count > $test_limit);

    my $HW   = IntEmu->new;
    #%{$HW}   = %{$HW_init};

    my $code = $HW->{'code'};
    @{$code} = @{$test->[2]};

    $HW->{'alloc_first'} = scalar @{$code};
    $HW->{'alloc_last'}  = $HW->{'alloc_first'};
    #$HW->{'debug'} = 1;

    #$HW->{'IN'} = $test->[0][0];
    push @{$HW->{'IN'}},$test->[0][0] if (@{$test->[0]});

    #$HW->{'debug'} = 1;

    #runit($HW,$code);
    $HW->runit($code);

    #my $result = $HW->{'OUT'};
    #my $result = join(',',@{$HW->{'OUT'}});
    my $result = shift @{$HW->{'OUT'}};

    if ($result == $test->[1]) {
      print "$test_count OK - ",$test->[3],"\n";
    }
    else {
      print "$test_count FAIL - expected ",$test->[1]," got $result - ",$test->[3],"\n";
    }
  }
}

=pod
if (0) {
  my $test_count = 0;
  my $test_skip  = 0;
  my $test_limit = 99;

  for my $test (@$tests) {
    $test_count++;
    next if ($test_count <= $test_skip);
    last if ($test_count > $test_limit);

    my $code = [];
    @{$code} = @{$test->[2]};

    my $HW   = {};
    %{$HW}   = %{$HW_init};

    print "$test_count decompile - ",$test->[3],"\n";
    print '$code: ',code_array2string($code),"\n";
    decomp($HW,$code);
  }
}
=cut

